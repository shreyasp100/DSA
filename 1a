import numpy as np
import random
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
X_train = np.loadtxt('F:\Data\input.csv', delimiter = ',')

X_train = X_train.reshape(len(X_train), 100, 100, 3)
Y_train = Y_train.reshape(len(Y_train), 1)
X_test = X_test.reshape(len(X_test), 100, 100, 3)
Y_test = Y_test.reshape(len(Y_test), 1)
X_train = X_train/255.0
X_test = X_test/255.0
print("Shape of X_train: ", X_train.shape)
print("Shape of Y_train: ", Y_train.shape)
print("Shape of X_test: ", X_test.shape)
print("Shape of Y_test: ", Y_test.shape)

idx = random.randint(0, len(X_train))
plt.imshow(X_train[idx])
plt.show()
model = Sequential()
model.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (100, 100, 3)))
model.add(MaxPooling2D((2,2)))
model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(64, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))

model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy']
model.fit(X_train, Y_train, epochs = 5, batch_size = 64)
model.evaluate(X_test, Y_test)
idx2 = random.randint(0, len(Y_test))
plt.imshow(X_test[idx2, :])
plt.show()
y_pred = model.predict(X_test[idx2, :].reshape(1, 100, 100, 3))
y_pred = y_pred > 0.5
if(y_pred == 0):
 pred = 'dog'
else:
 pred = 'cat'

print("Our model says it is a :", pred)

---------------------
import numpy as np
import tensorflow as tf 
from tensorflow import keras
import matplotlib.pyplot as plt
data=tf.keras.datasets.mnist
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.datasets import mnist
(x_train,y_train),(x_test,y_test)=data.load_data()
x_train,x_test =x_train/255,x_test/255

model=tf.keras.models.Sequential([
tf.keras.layers.Flatten(input_shape=(28,28)), 
tf.keras.layers.Dense(150,activation='relu'), 
tf.keras.layers.Dense(10,activation='softmax') 
])

sgd=SGD(0.02) 
model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metr
history=model.fit(x_train, y_train,validation_data=(x_test,y_test),epochs=5
test_loss,test_acc=model.evaluate(x_test,y_test)
plt.imshow(x_test[4])
prediction=model.predict(x_test) #predict the data
print(np.argmax(prediction[4]))
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Training Loss and accuracy')
plt.ylabel('accuracy/Loss')
plt.xlabel('epoch')
plt.legend(['accuracy', 'val_accuracy','loss','val_loss'])
plt.show()
